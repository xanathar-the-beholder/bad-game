package complexity.copy;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

import sun.applet.Main;

public class ComplexityTest {

	private M m;
	
	@Test
	public void should() throws Exception {
		Main.main(new String[0]);
		m.keyPressed(null);
		m.keyReleased(null);
		m.keyTyped(null);
	}
	
	@Test
	public void shouldTest() {
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
	}

	@Test
	public void shouldTestFalse() {
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
	}

	@Test
	public void shouldTestB() {
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
	}

	@Test
	public void shouldTestFalseB() {
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertFalse(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
		assertTrue(true);
	}

}
